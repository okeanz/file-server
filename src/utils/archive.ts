import fs from 'fs';
import path from 'path';
import archiver from 'archiver';
import crypto from 'crypto';

/**
 * –ê—Ä—Ö–∏–≤–∏—Ä—É–µ—Ç –ø–∞–ø–∫—É –≤ zip
 * @param srcDir –ø—É—Ç—å –∫ –ø–∞–ø–∫–µ, –∫–æ—Ç–æ—Ä—É—é –Ω—É–∂–Ω–æ —É–ø–∞–∫–æ–≤–∞—Ç—å
 * @param destDir –ø—É—Ç—å –∫ –ø–∞–ø–∫–µ, –∫—É–¥–∞ –ø–æ–ª–æ–∂–∏—Ç—å –∞—Ä—Ö–∏–≤
 */
export async function makeArchive(srcDir: string, destDir: string): Promise<void> {
  const folderName = path.basename(srcDir);
  const destFile = path.join(path.join(__dirname, destDir), `${folderName}.zip`);
  const srcDirAbs = path.join(__dirname, srcDir);
  const destDirAbs = path.join(__dirname, destDir);

  return new Promise<void>((resolve, reject) => {
    if (!fs.existsSync(srcDirAbs)) {
      return reject(new Error(`–ü–∞–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: ${srcDirAbs}`));
    }

    // —Å–æ–∑–¥–∞—ë–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    fs.mkdirSync(path.resolve(destDirAbs), { recursive: true });

    console.log(`\nüì¶ –ù–∞—á–∞–ª–æ –∞—Ä—Ö–∏–≤–∞—Ü–∏–∏: ${srcDirAbs}`);
    console.log(`‚û°Ô∏è –¶–µ–ª–µ–≤–æ–π –∞—Ä—Ö–∏–≤: ${destFile}`);

    const output = fs.createWriteStream(destFile);
    const archive = archiver('zip', { zlib: { level: 9 } });

    // —Å–æ–±—ã—Ç–∏—è –ø–æ—Ç–æ–∫–∞ –∑–∞–ø–∏—Å–∏
    output.on('close', () => {
      const fileBuffer = fs.readFileSync(destFile);
      const archiveChecksum = crypto.createHash('sha256').update(fileBuffer).digest('hex');
      fs.writeFileSync(destFile + '.sha256', archiveChecksum, 'utf-8');
      console.log(
        `‚úÖ  –ê—Ä—Ö–∏–≤–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –†–∞–∑–º–µ—Ä –∞—Ä—Ö–∏–≤–∞: ${(archive.pointer() / 1024 / 1024).toFixed(6)} MB`,
      );
      console.log(`sha256: ${archiveChecksum}`);

      resolve();
    });

    output.on('error', (err) => {
      console.error(err);
      reject(err);
    });

    archive.on('error', (err) => {
      console.error('‚ùå –û—à–∏–±–∫–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –∞—Ä—Ö–∏–≤–∞—Ü–∏–∏:', err);
      reject(err);
    });

    // —Å–≤—è–∑—ã–≤–∞–µ–º –ø–æ—Ç–æ–∫–∏
    archive.pipe(output);

    // –∫–ª–∞–¥—ë–º –ø–∞–ø–∫—É –≤ –∞—Ä—Ö–∏–≤ —Å –µ—ë –∏–º–µ–Ω–µ–º
    archive.directory(srcDirAbs, false);

    archive.finalize().catch((err) => {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–∏–Ω–∞–ª–∏–∑–∞—Ü–∏–∏ –∞—Ä—Ö–∏–≤–∞:', err);
      reject(err);
    });
  });
}
